{"version":3,"sources":["context/index.js","helpers/jsonParser.js","helpers/validateJson.js","components/Navigator/index.jsx","components/JsonEditor/index.jsx","components/JsonGraph/index.jsx","App.jsx","index.jsx"],"names":["AppContext","createContext","jsonParser","jsonObject","children","keys","Object","length","forEach","key","keyObject","Array","isArray","babyChildren","element","index","push","name","value","validateJson","json","JSON","parse","valid","error","err","toString","Navigator","buttonType","buttonText","onClick","darkToggleButton","useContext","Box","display","flexDirection","alignItems","justifyContent","Button","variant","color","style","margin","width","type","JsonEditor","useState","setError","setJson","toggleEditor","onSubmit","e","preventDefault","TextField","id","label","multiline","rows","onChange","target","Alert","severity","am4UseTheme","am4themes_animated","JsonGraph","chartRef","useRef","useLayoutEffect","chart","create","ForceDirectedTree","networkSeries","series","ForceDirectedSeries","data","dataFields","linkWith","nodes","template","tooltipText","fillOpacity","text","fontSize","maxLevels","maxRadius","percent","manyBodyStrength","hideOversized","truncate","current","dispose","marginTop","marginRight","marginLeft","height","App","showEditor","setShowEditor","darkMode","setDarkMode","palletType","darkTheme","createMuiTheme","palette","IconButton","aria-label","prevState","ThemeProvider","theme","Provider","CssBaseline","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5a9b9cd.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const AppContext = createContext();\n","const jsonParser = (jsonObject) => {\n  let children = [];\n  const keys = Object.keys(jsonObject);\n  if (keys && keys.length > 0) {\n    keys.forEach(function (key) {\n      const keyObject = jsonObject[key];\n      if (typeof keyObject === \"object\") {\n        if (Array.isArray(keyObject)) {\n          let babyChildren = [];\n          keyObject.forEach((element, index) => {\n            if (typeof element === \"object\") {\n              babyChildren.push({\n                name: `${key}(${index})`,\n                children: jsonParser(element),\n                value: 1,\n              });\n            } else {\n              babyChildren.push({\n                name: element,\n                value: 1,\n              });\n            }\n          });\n          children.push({\n            name: key,\n            children: babyChildren,\n            value: 1,\n          });\n        } else {\n          children.push({\n            name: key,\n            children: jsonParser(keyObject),\n            value: 1,\n          });\n        }\n      } else {\n        children.push({\n          name: key,\n          children: [{ name: keyObject }],\n          value: 1,\n        });\n      }\n    });\n  }\n  return children;\n};\nexport default jsonParser;\n","const validateJson = (json) => {\n  try {\n    JSON.parse(json);\n    return { valid: true, error: \"\" };\n  } catch (err) {\n    return { valid: false, error: err.toString() };\n  }\n};\n\nexport default validateJson;\n","import { Box, Button } from \"@material-ui/core\";\nimport { useContext } from \"react\";\nimport { AppContext } from \"../../context\";\n\nexport const Navigator = ({ buttonType, buttonText, onClick }) => {\n  const { darkToggleButton } = useContext(AppContext);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        style={{ margin: 10, width: \"95%\" }}\n        type={buttonType || \"button\"}\n        onClick={onClick || null}\n      >\n        {buttonText}\n      </Button>\n      {darkToggleButton}\n    </Box>\n  );\n};\n","import { Box, TextField } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { useContext, useState } from \"react\";\nimport { AppContext } from \"../../context\";\nimport { validateJson } from \"../../helpers\";\nimport { Navigator } from \"../Navigator\";\nexport const JsonEditor = ({}) => {\n  const [error, setError] = useState(\"\");\n  const { json, setJson, toggleEditor } = useContext(AppContext);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { valid, error } = validateJson(json);\n    if (valid) toggleEditor();\n    else setError(error);\n  };\n\n  const handleJsonChange = (e) => {\n    setJson(e.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box display=\"flex\" style={{ margin: 10 }} flexDirection=\"column\">\n        <TextField\n          id=\"outlined-multiline-static\"\n          label=\"Json\"\n          multiline\n          style={{ margin: 10 }}\n          rows={21}\n          value={json}\n          onChange={handleJsonChange}\n          variant=\"outlined\"\n        />\n        {error && (\n          <Alert style={{ margin: 10 }} severity=\"error\">\n            Invalid Json | {error}\n          </Alert>\n        )}\n        <Navigator buttonType=\"submit\" buttonText=\"Submit\" />\n      </Box>\n    </form>\n  );\n};\n","import {\n  create,\n  percent,\n  useTheme as am4UseTheme,\n} from \"@amcharts/amcharts4/core\";\nimport {\n  ForceDirectedSeries,\n  ForceDirectedTree,\n} from \"@amcharts/amcharts4/plugins/forceDirected\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { Box } from \"@material-ui/core\";\nimport React, { useContext, useLayoutEffect, useRef } from \"react\";\nimport { AppContext } from \"../../context\";\nimport { jsonParser } from \"../../helpers\";\nimport { Navigator } from \"../Navigator\";\nam4UseTheme(am4themes_animated);\nexport const JsonGraph = ({}) => {\n  const chartRef = useRef(null);\n  const { json, toggleEditor } = useContext(AppContext);\n  useLayoutEffect(() => {\n    let chart = create(\"graph\", ForceDirectedTree);\n\n    let networkSeries = chart.series.push(new ForceDirectedSeries());\n    const children = jsonParser(JSON.parse(json));\n    networkSeries.data = [\n      {\n        name: \"response\",\n        children: children,\n        value: 1,\n      },\n    ];\n\n    networkSeries.dataFields.linkWith = \"linkWith\";\n    networkSeries.dataFields.name = \"name\";\n    networkSeries.dataFields.id = \"name\";\n    networkSeries.dataFields.value = \"value\";\n    networkSeries.dataFields.children = \"children\";\n\n    networkSeries.nodes.template.tooltipText = \"{name}\";\n    networkSeries.nodes.template.fillOpacity = 1;\n\n    networkSeries.nodes.template.label.text = \"{name}\";\n    networkSeries.fontSize = 12;\n    networkSeries.maxLevels = 2;\n    networkSeries.maxRadius = percent(6);\n    networkSeries.manyBodyStrength = -16;\n    networkSeries.nodes.template.label.hideOversized = true;\n    networkSeries.nodes.template.label.truncate = true;\n    chartRef.current = chart;\n    return () => {\n      chart.dispose();\n    };\n  }, []);\n  return (\n    <Box\n      style={{ marginTop: 10, marginRight: 10, marginLeft: 10 }}\n      display=\"flex\"\n      flexDirection=\"column\"\n    >\n      <div id=\"graph\" style={{ width: \"100%\", height: \"510px\" }}></div>\n      <Navigator\n        buttonType=\"button\"\n        onClick={toggleEditor}\n        buttonText=\"Back to Editor\"\n      />\n    </Box>\n  );\n};\n","import { CssBaseline, IconButton } from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport BrightnessHighIcon from \"@material-ui/icons/BrightnessHigh\";\nimport BrightnessLowIcon from \"@material-ui/icons/BrightnessLow\";\nimport { useState } from \"react\";\nimport { JsonEditor } from \"./components/JsonEditor\";\nimport { JsonGraph } from \"./components/JsonGraph\";\nimport { AppContext } from \"./context\";\n\nexport const App = () => {\n  const [showEditor, setShowEditor] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [json, setJson] = useState(\"{}\");\n  const palletType = darkMode ? \"dark\" : \"light\";\n\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: palletType,\n    },\n  });\n  const toggleEditor = () => {\n    setShowEditor((prevState) => !prevState);\n  };\n  const handleThemeChange = () => {\n    setDarkMode((prevState) => !prevState);\n  };\n  const darkToggleButton = (\n    <IconButton aria-label=\"delete\" onClick={handleThemeChange}>\n      {darkMode ? <BrightnessHighIcon /> : <BrightnessLowIcon />}\n    </IconButton>\n  );\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <AppContext.Provider\n        value={{ json, setJson, toggleEditor, darkToggleButton }}\n      >\n        <CssBaseline />\n        {showEditor ? <JsonEditor /> : <JsonGraph />}\n      </AppContext.Provider>\n    </ThemeProvider>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}