{"version":3,"sources":["helpers/jsonParser.js","helpers/validateJson.js","components/JsonEditor/index.jsx","components/JsonGraph/index.jsx","App.jsx","index.jsx"],"names":["jsonParser","jsonObject","children","keys","Object","length","forEach","key","keyObject","Array","isArray","babyChildren","element","index","push","name","value","validateJson","json","JSON","parse","valid","error","err","toString","JsonEditor","setJson","showGraph","useState","setError","onSubmit","e","preventDefault","Box","display","style","margin","flexDirection","TextField","id","label","multiline","rows","onChange","target","variant","Alert","severity","Button","color","type","am4core","am4themes_animated","JsonGraph","hideGraph","chartRef","useRef","useLayoutEffect","chart","am4plugins_forceDirected","networkSeries","series","data","dataFields","linkWith","nodes","template","tooltipText","fillOpacity","text","fontSize","maxLevels","maxRadius","manyBodyStrength","hideOversized","truncate","current","dispose","marginTop","marginRight","marginLeft","width","height","onClick","App","showEditor","setShowEditor","ReactDOM","render","document","getElementById"],"mappings":"6OA8CeA,EA9CI,SAAbA,EAAcC,GAClB,IAAIC,EAAW,GACTC,EAAOC,OAAOD,KAAKF,GA0CzB,OAzCIE,GAAQA,EAAKE,OAAS,GACxBF,EAAKG,SAAQ,SAAUC,GACrB,IAAMC,EAAYP,EAAWM,GAC7B,GAAyB,kBAAdC,EACT,GAAIC,MAAMC,QAAQF,GAAY,CAC5B,IAAIG,EAAe,GACnBH,EAAUF,SAAQ,SAACM,EAASC,GACH,kBAAZD,EACTD,EAAaG,KAAK,CAChBC,KAAK,GAAD,OAAKR,EAAL,YAAYM,EAAZ,KACJX,SAAUF,EAAWY,GACrBI,MAAO,IAGTL,EAAaG,KAAK,CAChBC,KAAMH,EACNI,MAAO,OAIbd,EAASY,KAAK,CACZC,KAAMR,EACNL,SAAUS,EACVK,MAAO,SAGTd,EAASY,KAAK,CACZC,KAAMR,EACNL,SAAUF,EAAWQ,GACrBQ,MAAO,SAIXd,EAASY,KAAK,CACZC,KAAMR,EACNL,SAAU,CAAC,CAAEa,KAAMP,IACnBQ,MAAO,OAKRd,GCnCMe,EATM,SAACC,GACpB,IAEE,OADAC,KAAKC,MAAMF,GACJ,CAAEG,OAAO,EAAMC,MAAO,IAC7B,MAAOC,GACP,MAAO,CAAEF,OAAO,EAAOC,MAAOC,EAAIC,cCDzBC,EAAa,SAAC,GAAkC,IAAhCP,EAA+B,EAA/BA,KAAMQ,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAAgB,EAChCC,mBAAS,IADuB,mBACnDN,EADmD,KAC5CO,EAD4C,KAc1D,OACE,sBAAMC,SAZa,SAACC,GACpBA,EAAEC,iBADwB,MAEDf,EAAaC,GAA9BG,EAFkB,EAElBA,MAAOC,EAFW,EAEXA,MACXD,EAAOM,IACNE,EAASP,IAQd,SACE,eAACW,EAAA,EAAD,CAAKC,QAAQ,OAAOC,MAAO,CAAEC,OAAQ,IAAMC,cAAc,SAAzD,UACE,cAACC,EAAA,EAAD,CACEC,GAAG,4BACHC,MAAM,OACNC,WAAS,EACTN,MAAO,CAAEC,OAAQ,IACjBM,KAAM,GACN1B,MAAOE,EACPyB,SAdiB,SAACZ,GACxBL,EAAQK,EAAEa,OAAO5B,QAcX6B,QAAQ,aAETvB,GACC,eAACwB,EAAA,EAAD,CAAOX,MAAO,CAAEC,OAAQ,IAAMW,SAAS,QAAvC,4BACkBzB,KAGpB,cAAC0B,EAAA,EAAD,CACEH,QAAQ,WACRI,MAAM,UACNd,MAAO,CAAEC,OAAQ,IACjBc,KAAK,SAJP,0B,2BC7BRC,IAAiBC,KACV,IAAMC,EAAY,SAAC,GAAyB,IAAvBnC,EAAsB,EAAtBA,KAAMoC,EAAgB,EAAhBA,UAC1BC,EAAWC,iBAAO,MAyCxB,OAvCAC,2BAAgB,WACd,IAAIC,EAAQP,IACV,QACAQ,KAGEC,EAAgBF,EAAMG,OAAO/C,KAC/B,IAAI6C,KAEAzD,EAAWF,EAAWmB,KAAKC,MAAMF,IA0BvC,OAzBA0C,EAAcE,KAAO,CACnB,CACE/C,KAAM,WACNb,SAAUA,EACVc,MAAO,IAIX4C,EAAcG,WAAWC,SAAW,WACpCJ,EAAcG,WAAWhD,KAAO,OAChC6C,EAAcG,WAAWxB,GAAK,OAC9BqB,EAAcG,WAAW/C,MAAQ,QACjC4C,EAAcG,WAAW7D,SAAW,WAEpC0D,EAAcK,MAAMC,SAASC,YAAc,SAC3CP,EAAcK,MAAMC,SAASE,YAAc,EAE3CR,EAAcK,MAAMC,SAAS1B,MAAM6B,KAAO,SAC1CT,EAAcU,SAAW,GACzBV,EAAcW,UAAY,EAC1BX,EAAcY,UAAYrB,IAAgB,GAC1CS,EAAca,kBAAoB,GAClCb,EAAcK,MAAMC,SAAS1B,MAAMkC,eAAgB,EACnDd,EAAcK,MAAMC,SAAS1B,MAAMmC,UAAW,EAC9CpB,EAASqB,QAAUlB,EACZ,WACLA,EAAMmB,aAEP,IAED,eAAC5C,EAAA,EAAD,CACEE,MAAO,CAAE2C,UAAW,GAAIC,YAAa,GAAIC,WAAY,IACrD9C,QAAQ,OACRG,cAAc,SAHhB,UAKE,qBAAKE,GAAG,QAAQJ,MAAO,CAAE8C,MAAO,OAAQC,OAAQ,WAChD,cAAClC,EAAA,EAAD,CACEH,QAAQ,WACRI,MAAM,UACNd,MAAO,CAAEC,OAAQ,IACjB+C,QAAS,kBAAM7B,KAJjB,gCC/BS8B,MAtBf,WAAgB,IAAD,EACuBxD,oBAAS,GADhC,mBACNyD,EADM,KACMC,EADN,OAEW1D,mBAAS,MAFpB,mBAENV,EAFM,KAEAQ,EAFA,KAWb,OACE,mCACG2D,EACC,cAAC,EAAD,CAAYnE,KAAMA,EAAMQ,QAASA,EAASC,UAV9B,WAChB2D,GAAc,MAWV,cAAC,EAAD,CAAWhC,UATC,WAChBgC,GAAc,IAQuBpE,KAAMA,OCf/CqE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3b586591.chunk.js","sourcesContent":["const jsonParser = (jsonObject) => {\n  let children = [];\n  const keys = Object.keys(jsonObject);\n  if (keys && keys.length > 0) {\n    keys.forEach(function (key) {\n      const keyObject = jsonObject[key];\n      if (typeof keyObject === \"object\") {\n        if (Array.isArray(keyObject)) {\n          let babyChildren = [];\n          keyObject.forEach((element, index) => {\n            if (typeof element === \"object\") {\n              babyChildren.push({\n                name: `${key}(${index})`,\n                children: jsonParser(element),\n                value: 1,\n              });\n            } else {\n              babyChildren.push({\n                name: element,\n                value: 1,\n              });\n            }\n          });\n          children.push({\n            name: key,\n            children: babyChildren,\n            value: 1,\n          });\n        } else {\n          children.push({\n            name: key,\n            children: jsonParser(keyObject),\n            value: 1,\n          });\n        }\n      } else {\n        children.push({\n          name: key,\n          children: [{ name: keyObject }],\n          value: 1,\n        });\n      }\n    });\n  }\n  return children;\n};\nexport default jsonParser;\n","const validateJson = (json) => {\n  try {\n    JSON.parse(json);\n    return { valid: true, error: \"\" };\n  } catch (err) {\n    return { valid: false, error: err.toString() };\n  }\n};\n\nexport default validateJson;\n","import { Box, TextField, Button } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport React, { useState } from \"react\";\nimport { validateJson } from \"../../helpers\";\nexport const JsonEditor = ({ json, setJson, showGraph }) => {\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { valid, error } = validateJson(json);\n    if (valid) showGraph();\n    else setError(error);\n  };\n\n  const handleJsonChange = (e) => {\n    setJson(e.target.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box display=\"flex\" style={{ margin: 10 }} flexDirection=\"column\">\n        <TextField\n          id=\"outlined-multiline-static\"\n          label=\"Json\"\n          multiline\n          style={{ margin: 10 }}\n          rows={21}\n          value={json}\n          onChange={handleJsonChange}\n          variant=\"outlined\"\n        />\n        {error && (\n          <Alert style={{ margin: 10 }} severity=\"error\">\n            Invalid Json | {error}\n          </Alert>\n        )}\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          style={{ margin: 10 }}\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n      </Box>\n    </form>\n  );\n};\n","import { Box, Button, Container } from \"@material-ui/core\";\nimport React, { useRef, useLayoutEffect } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4plugins_forceDirected from \"@amcharts/amcharts4/plugins/forceDirected\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { jsonParser } from \"../../helpers\";\n\nam4core.useTheme(am4themes_animated);\nexport const JsonGraph = ({ json, hideGraph }) => {\n  const chartRef = useRef(null);\n\n  useLayoutEffect(() => {\n    let chart = am4core.create(\n      \"graph\",\n      am4plugins_forceDirected.ForceDirectedTree\n    );\n\n    let networkSeries = chart.series.push(\n      new am4plugins_forceDirected.ForceDirectedSeries()\n    );\n    const children = jsonParser(JSON.parse(json));\n    networkSeries.data = [\n      {\n        name: \"response\",\n        children: children,\n        value: 1,\n      },\n    ];\n\n    networkSeries.dataFields.linkWith = \"linkWith\";\n    networkSeries.dataFields.name = \"name\";\n    networkSeries.dataFields.id = \"name\";\n    networkSeries.dataFields.value = \"value\";\n    networkSeries.dataFields.children = \"children\";\n\n    networkSeries.nodes.template.tooltipText = \"{name}\";\n    networkSeries.nodes.template.fillOpacity = 1;\n\n    networkSeries.nodes.template.label.text = \"{name}\";\n    networkSeries.fontSize = 12;\n    networkSeries.maxLevels = 2;\n    networkSeries.maxRadius = am4core.percent(6);\n    networkSeries.manyBodyStrength = -16;\n    networkSeries.nodes.template.label.hideOversized = true;\n    networkSeries.nodes.template.label.truncate = true;\n    chartRef.current = chart;\n    return () => {\n      chart.dispose();\n    };\n  }, []);\n  return (\n    <Box\n      style={{ marginTop: 10, marginRight: 10, marginLeft: 10 }}\n      display=\"flex\"\n      flexDirection=\"column\"\n    >\n      <div id=\"graph\" style={{ width: \"100%\", height: \"550px\" }}></div>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        style={{ margin: 10 }}\n        onClick={() => hideGraph()}\n      >\n        Back to Editor\n      </Button>\n    </Box>\n  );\n};\n","import \"normalize.css\";\nimport { useState } from \"react\";\nimport { JsonEditor } from \"./components/JsonEditor\";\nimport { JsonGraph } from \"./components/JsonGraph\";\nfunction App() {\n  const [showEditor, setShowEditor] = useState(true);\n  const [json, setJson] = useState(\"{}\");\n\n  const showGraph = () => {\n    setShowEditor(false);\n  };\n  const hideGraph = () => {\n    setShowEditor(true);\n  };\n\n  return (\n    <>\n      {showEditor ? (\n        <JsonEditor json={json} setJson={setJson} showGraph={showGraph} />\n      ) : (\n        <JsonGraph hideGraph={hideGraph} json={json} />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}